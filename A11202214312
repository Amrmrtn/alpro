#include <iostream>
#include <vector>
//cara mengeceknya satu satu dimatikan dulu salah 2 fungsinya:)
using namespace std;

bool isOdd(int n) {
    return n % 2 != 0;
}
//mencari bilangan ganjil terbesar
void printgenapTerkecilEven(int arr[], int size) {
    int terkecil = INT_MAX;
    int index = -1;

    for (int i = 0; i < size; i++) {
        if (arr[i] % 4 == 0 && arr[i] < terkecil) {
            terkecil = arr[i];
            index= i;
        }
    }

    if (index == -1) {
        cout << "Tidak ada bilangan genap dalam array." << endl;
    } else {
        cout << "Nilai genap terkecil adalah: " << terkecil << endl;
        cout << "dengan index: " << index << endl;

    }
}
/*
//quick sort
void print(int arr[], int size)
{
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
}

int partition(int arr[], int low, int high)
{
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j < high; j++)
    {

        if (arr[j] <= pivot)
        {
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    return (i + 1);
}


void quickSort(int array[], int low, int high) {
    if(low < high) { //temukan elemen pivot sehingga elemen yang lebih kecil dari pivot ada di kiri pivot elemen yang lebih besar dari pivot ada di kanan dari pivot
            int pi = partition(array, low,high); // panggilan rekursif di sebelah kiri pivot
            quickSort(array, low,pi - 1); // panggilan rekursif di sebelah kanan pivot
            quickSort(array, pi+ 1, high); }
}
//Heap sort

//fungsi pada tree
void heapify(int A[], int n, int i){ //funsi untuk menumpuk angka pada akar
    int largest = i; //i disini sebagai root pada tree sedangkan
    //angka terbesar sebagai parents
    int leftChild = 2 * i + 1;
    int rightChild = 2 * i + 2;
    //jika left child lebih besar dari pada root maka akan menjadi parents
    if(leftChild < n && A[leftChild] > A[largest]) largest = leftChild;
    if(rightChild < n && A[rightChild] > A[largest]) largest = rightChild;

    if(largest != i){
        swap(A[i],A[largest]);
        heapify(A, n, largest); //melakukan recursive function
    }
}
void heapSort(int A[], int n){
    //mengatur kembali array
    for(int i=n/2-1; i>=0; i--){
        heapify(A, n, i);
    }
    // satu persatu ekstrak setiap elemen dari heap
    for(int i=n-1; i>=0; i--){
        //merubah akar sampai selesai
        swap(A[0], A[i]);
        // memanggil max heapify pada heap yang dikurangi
        heapify(A, i, 0);
    }
}
void show(int A[], int n){
    for(int i=0; i<n; i++){
        cout << A[i] << " ";
    }
}
*/
int main()
{

    int arr[] = {6, 7, 4, 3, 2};
    int size = sizeof(arr)/sizeof(arr[0]);
    printgenapTerkecilEven(arr,size);


/*
    //quick sort
    int size;
    cout << "\nmasukan banyaknya data : ";//masukan berapa data yang ingin di inputkan(index)

    cin >> size;

    int arr[size];

    cout << "\nmasukan nilai : ";//nilai dalam index

    for (int i = 0; i < size; ++i)
    {
        cout << "\n";
        cin >> arr[i];
    }
    quickSort(arr, 0, size);
    cout << "Telah disorting\n";
    print(arr, size);


    //heap sort
    int A[] = {9,1,7,15,12,4};
    int n = sizeof(A) / sizeof(A[0]);
    cout << "Sebelum di sorting : ";
    show(A, n);

    cout << endl;

    heapSort(A, n);
    cout << "Setelah di sorting : ";
    show(A, n);*/
    return 0;
}
